# Generated by https://quicktype.io

from enum import Enum
from typing import Any, List, Optional


class TypeEnum(Enum):
    MULTIPLE_CHOICE_EXERCISE = "MultipleChoiceExercise"
    NORMAL_EXERCISE = "NormalExercise"
    VIDEO_EXERCISE = "VideoExercise"


class Exercise:
    type: TypeEnum
    title: str
    aggregate_xp: int
    number: int
    url: str

    def __init__(
        self,
        type: TypeEnum,
        title: str,
        aggregate_xp: int,
        number: int,
        url: str,
        **kwargs
    ) -> None:
        self.type = type
        self.title = title
        self.aggregate_xp = aggregate_xp
        self.number = number
        self.url = url


class Chapter:
    id: int
    title_meta: str
    title: str
    description: str
    number: int
    slug: str
    nb_exercises: int
    badge_completed_url: str
    badge_uncompleted_url: str
    last_updated_on: str
    slides_link: str
    free_preview: Optional[bool]
    xp: int
    number_of_videos: int
    exercises: List[Exercise]

    def __init__(
        self,
        id: int,
        title_meta: str,
        title: str,
        description: str,
        number: int,
        slug: str,
        nb_exercises: int,
        badge_completed_url: str,
        badge_uncompleted_url: str,
        last_updated_on: str,
        slides_link: str,
        free_preview: Optional[bool],
        xp: int,
        number_of_videos: int,
        exercises: List[Exercise],
        **kwargs
    ) -> None:
        self.id = id
        self.title_meta = title_meta
        self.title = title
        self.description = description
        self.number = number
        self.slug = slug
        self.nb_exercises = nb_exercises
        self.badge_completed_url = badge_completed_url
        self.badge_uncompleted_url = badge_uncompleted_url
        self.last_updated_on = last_updated_on
        self.slides_link = slides_link
        self.free_preview = free_preview
        self.xp = xp
        self.number_of_videos = number_of_videos
        self.exercises = [Exercise(**c) for c in exercises]


class Collaborator:
    avatar_url: str
    full_name: str

    def __init__(self, avatar_url: str, full_name: str) -> None:
        self.avatar_url = avatar_url
        self.full_name = full_name


class Dataset:
    asset_url: str
    name: str

    def __init__(self, asset_url: str, name: str) -> None:
        self.asset_url = asset_url
        self.name = name


class Instructor:
    id: int
    marketing_biography: str
    biography: str
    avatar_url: str
    full_name: str
    instructor_path: str

    def __init__(
        self,
        id: int,
        marketing_biography: str,
        biography: str,
        avatar_url: str,
        full_name: str,
        instructor_path: str,
        **kwargs
    ) -> None:
        self.id = id
        self.marketing_biography = marketing_biography
        self.biography = biography
        self.avatar_url = avatar_url
        self.full_name = full_name
        self.instructor_path = instructor_path


class SharingLinks:
    twitter: str
    facebook: str

    def __init__(self, twitter: str, facebook: str) -> None:
        self.twitter = twitter
        self.facebook = facebook


class Track:
    path: str
    title_with_subtitle: str

    def __init__(self, path: str, title_with_subtitle: str) -> None:
        self.path = path
        self.title_with_subtitle = title_with_subtitle


class Course:
    def __init__(self,
                 id: int,
                 title: str,
                 description: str = "",
                 slug: str = None,
                 chapters: List[dict] = None,
                 datasets: List[dict] = None,
                 time_needed_in_hours: int = None,
                 **kwargs) -> None:
        """
        Flexible Course constructor that works with the new API.
        Extra fields are captured by **kwargs so we don't break.
        """

        self.id = id
        self.title = title
        self.description = description
        self.slug = slug or str(id)

        # build nested objects safely
        self.chapters = [Chapter(**c) for c in (chapters or [])]
        self.datasets = [Dataset(**c) for c in (datasets or [])]

        # support both old/new API keys
        self.time_needed = kwargs.get("time_needed") or time_needed_in_hours
        self.xp = kwargs.get("xp", 0)
        self.difficulty_level = kwargs.get("difficulty_level", None)
        self.state = kwargs.get("state", "unknown")

        # optional stuff
        self.short_description = kwargs.get("short_description", "")
        self.slug = kwargs.get("slug", slug or str(id))
        self.image_url = kwargs.get("image_url", "")
        self.image_thumbnail_url = kwargs.get("image_thumbnail_url", "")
        self.last_updated_on = kwargs.get("last_updated_on", "")
        self.link = kwargs.get("link", "")
        self.programming_language = kwargs.get("programming_language", "unknown")

        # fallback empty lists
        self.instructors = [Instructor(**c) for c in kwargs.get("instructors", [])]
        self.collaborators = [Collaborator(**c) for c in kwargs.get("collaborators", [])]
        self.tracks = [Track(**c) for c in kwargs.get("tracks", [])]

        # absorb anything else without crashing
        self.extra = kwargs